#!/usr/bin/ruby -w
# The GNU General Public License v3.0
PATCH_VERSION_ = '0.1.3'

require 'irb'
require 'io/console'

STDOUT.sync = true

class String
	@@colour_set =  [(34..39), (70..75), (136..140), (208..213), (214..219)].map(&:to_a)
	@@colour_set.concat(@@colour_set.map(&:reverse))

	def self.colours() @@colour_set.flatten.map { |temp| ("\e[38;5;#{temp.to_s}m") } end

	def colourize(line_break=true, blink=false)
		val = ''
		each_line do |str|
			colours = @@colour_set[0]

			index, length, colours_length = 0, str.length/colours.length, colours.length
			length = 1 if length == 0
			val.concat("\e[5m") if blink

			str.each_char.with_index do |c, i|
				index += 1 if (i % length == 0 && index < colours_length - 1) unless (i == 0 || i == 1)
				val.concat("\e[38;5;#{colours[index]}m#{c}")
			end

			val.concat("\e[0m") unless val.empty?
			val.concat("\n") if line_break
			@@colour_set.rotate!
		end
		val.chomp
	end

	alias to_colour colourize
end

####################################################

__t__ = Time.now
@__histfile__ = "#{ENV['HOME']}/.irb_history"

# We need Width, but no height, but we would like to declare to make it usable in irb
begin
	Terminal_Height, Terminal_Width = STDOUT.winsize
rescue Errno::ENOTTY
	puts "Inappropriate ioctl for device"
	puts "You should run this in a terminal!".colourize
rescue Exception
end

# Read histories from file, and append it to Readline::HISTORY to make the history available in the current session!
Readline::HISTORY.clear
if File.readable?(@__histfile__)
	File.open(@__histfile__, File::RDONLY) { |file| file.readlines.each { |temp| Readline::HISTORY << temp.chomp } }
else
	puts "No history event found...".colourize
end
@history_size = Readline::HISTORY.size

# Clear should print "\e[3J\e[H\e[2J" to clear the terminal
def clear() print "\e[3J\e[H\e[2J" if STDOUT.tty? end

# Get the histories. hist!(n) where the n implies the number of line.
def hist!(n=1)
	begin
		puts File.readlines(@__histfile__)[n - 1].to_s.colourize

	rescue Errno::EACCES
		puts 'Permission Denied'.colourize

	rescue Exception => e
		return e, e.backtrace
	end
	nil
end

def history(n=0)
	begin
		histories = File.readlines(@__histfile__)[0..n - 1]
		unless block_given?
			histories.each_with_index do |history, i|
				text = "#{i + 1}    #{history}"
				print text.colourize
 			end
		else
			histories.each { |c| yield c }
		end

	rescue Errno::EACCES
		puts 'Permission Denied'.colourize

	rescue Errno::ENOENT
		puts "#{@__histfile__} doesn't exist.".colourize

	rescue Exception => e
		return e, e.backtrace
	end
	nil
end

def delete_history
	begin
		puts 'Remove history? (N/y)'.colourize
		if STDIN.gets.downcase.strip == 'y'
			File.delete(@__histfile__)
			puts "File #{@__histfile__} deleted".colourize
		else
			puts "Not Deleted".colourize
		end

	rescue Errno::ENOENT
		puts "#{@__histfile__} doesn't exist.".colourize

	rescue Exception => e
		return e, e.backtrace.join("\n")
	end
	nil
end

def write_history
	begin
		histories = Readline::HISTORY.to_a[@history_size..-1].map(&:strip)
		histories.delete('write_history')
		histories.delete('save_history')

		File.open(@__histfile__, 'a') { |file| file.puts(histories) }
		puts "#{histories.size} #{histories.size == 1 ? 'line has been' : 'lines have been'} written to #{@__histfile__}".colourize

	rescue Errno::EACCES
		puts 'Permission Denied'.colourize

	rescue Exception => e
		puts e, e.backtrace
	end
	nil
end

def printenv() puts ENV.each { |temp| puts "#{temp[0]} => #{temp[1]}".colourize } ; nil end
def config() RbConfig::CONFIG.to_a.each { |c| puts "#{c[0]} => #{c[1]}".colourize } ; nil end

alias irb_history history
alias save_history write_history
alias clr clear

ARGV.each_with_index { |gem, temp|
	text = "require #{gem}"
	printf("%02d  ", temp + 1)
	print text.colourize(false)
	print ' ' * ((Terminal_Width/3 - text.length).abs + 1)

	begin
 		puts("# => #{require(gem)}".colourize)

	rescue LoadError
		not_found = "! #{gem} not found. Skipping."
		puts not_found.colourize(true, true)
	end
}
puts unless ARGV.empty?

ARGV.clear

# TODO: Uncomment to Enable TracePoint before starting IRB
# TracePoint.new(:call) { |tp| p [tp.lineno, tp.defined_class, tp.method_id] }.enable

IRB.start

at_exit do
	etime = (Time.now - __t__).to_i
	minutes, seconds = etime/60, etime % 60
	puts "Exiting after #{minutes} #{minutes == 1 ? 'minute' : 'minutes' } #{seconds} #{seconds == 1 ? 'second' : 'seconds' }.".colourize
	write_history
end
