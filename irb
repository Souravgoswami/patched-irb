#!/usr/bin/ruby -w
# The GNU General Public License v3.0
PATCH_VERSION_ = '0.2.1'
%w(irb irb/completion io/console).each { |gem| require(gem) }

STDOUT.sync = true

# Handy QuickTools for quick calculations!
module QuickTools
	class << self
		def colourize(arg) arg.to_s.colourize end
		def sort_word(arg) arg.to_s.chars.sort.join end
		def reverse_sort_word(arg) sort_word(arg).reverse end
		def camelize(string) string.split(' ').map(&:capitalize).join(' ') end
		def factorial(number) (2..number.to_i).reduce(:*) end
		def permutation(argument) argument.to_s.chars.permutation.map(&:join) end

		def prime(range=100)
			(numbers = (2..range).to_a.unshift(nil, nil)).each do |num|
				next if num.nil?
				return numbers.compact if (sqr = num ** 2) > range
				sqr.step(range, num) { |x| numbers[x] = nil }
			end
		end

		def prime?(n=19) prime(n).include?(n) end

		def benchmark(*all_methods)
			require 'benchmark' unless defined?(Benchmark)
			all_methods.each { |method| Benchmark.benchmark { |b| b.report("#{method.to_s}") { eval(method.to_s) } } }
			nil
		end

		def pi(n=1_000)
			q, r, t, k, m, x, str = 1, 0, 1, 1, 3, 3, ''

			if 4 * q + r - t < m * t
				str.concat(m.to_s)
				q, r, m = 10 * q, 10 * (r - m * t), (10 * (3 * q + r)) / t - 10 * m
			else
				q, r, t, k, m, x = q * k, (2 * q + r) * x, t * x, k + 1, (q * (7 * k + 2) + r * x) / (t * x), x + 2
			end while str.length < n

			str[1, 0] = '.'
			str
		end
	end
end

class String
	colour_set =  [[154, 184, 208, 203, 198, 164, 129, 92], [63, 33, 39, 44, 49, 83, 118], (34..39), (70..75), (214..219), (40..45),
		[203, 198, 199, 164, 129, 93, 63, 33, 39, 44, 49, 48, 83, 118, 184, 214, 208]]

	@@colour_set = colour_set.map { |i| i.to_a.dup.tap { |x| x.concat(x.reverse) } }.concat(colour_set.map { |y| y.to_a.reverse.tap { |z| z.concat(z.reverse) } })

	def colourize(line_break=true, blink=false)
		val = blink ? "\e[5m" : ''

		each_line do |str|
			colours = @@colour_set[0]

			index, length, colours_length = 0, str.length / colours.size, colours.size
			length = 1 if length == 0
			str_len, i = str.length, -1

			while i < str_len do
				index += 1 if (i % length == 0 && index < colours_length - 1) && i > 1
				val.concat("\e[38;5;#{colours[index]}m#{str[i += 1]}")
			end

			val.concat("\n") if line_break
			@@colour_set.rotate!
		end

		val.concat("\e[0m") unless val.empty?
		val.chomp
	end

	def to_colour
		Kernel.warn("String#to_colour is deprecated. Use String#colourize or Kernel#decorate('string') instead.")
		colourize
	end
end

####################################################

# Check if the system is Linux / Termux or not
unless /linux/ === RbConfig::CONFIG['host_os']
	puts 'Uh Oh! This REPL is supported only by Linux.'
	puts 'You may expect unexpected behaviour if you continue. Continue? (Y/n)'
	exit! 100 if STDIN.getch == 'n'
end

Kernel.define_method(:decorate) { |*a| puts a.map { |b| String === b ? b.colourize(false) : b.to_s.colourize(false) } }

####################################################
if ARGV.include?('-v') || ARGV.include?('--version')
	decorate "IRB VERSION\t\t#{IRB::VERSION}"
	decorate "IRB Patch Version\t#{PATCH_VERSION_}"
	decorate "Ruby Version\t\t#{RUBY_VERSION}\t#{RUBY_PLATFORM}"
	exit 0
end

if ARGV.include?('-h') || ARGV.include?('--help')
	print "\e[2;3m"
	decorate "Usage irb [options] [filename / gem name]\n"

	decorate <<~EOF
		IRB is Interactive Ruby, a REPL for the Ruby programming language.
 		This is  a Patched IRB (Version #{PATCH_VERSION_}) for GNU/Linux systems aims to add more features on top of IRB.

		Options:
			-h / --help			Print help and exit
			-i / --incognito		Don't write history at exit
			--nohistory			Same as -i / --incognito
			--noverbose			Turn off verbose mode
			-v / --version			Print version and exit

		Example:
			1. Load a file:
				#{$PROGRAM_NAME} filename
			2. Load gems:
				#{$PROGRAM_NAME} open3 json time date io/console
	EOF

	exit! 0
end

nohistory = !not(ARGV.delete('--nohistory')) || !not(ARGV.delete('--incognito')) || !not(ARGV.delete('-i'))
$VERBOSE = not(ARGV.delete('--noverbose'))

__t__ = Time.now
@__histfile__ = "#{ENV['HOME']}/.irb_history"

# We need Width, but no height, but we would like to declare to make it usable in irb
begin
	Terminal_Height, Terminal_Width = STDOUT.winsize
rescue Errno::ENOTTY
	decorate "Inappropriate ioctl for device"
	decorate "You should run this in a terminal!"
	exit! 127
rescue Exception
	exit! 128
end

# Read histories from file, and append it to Readline::HISTORY to make the history available in the current session!
Readline::HISTORY.clear
if File.readable?(@__histfile__)
	File.open(@__histfile__, File::RDONLY) { |file| file.readlines.each { |temp| Readline::HISTORY << temp.chomp } }
else
	puts "#{@__histfile__} is either doesn't exist or is not readable.".colourize
end
@history_size = Readline::HISTORY.size

# clear() clears the terminal, and resets the cursor position to the first line.
def clear(*arg)
	print "\e[0m\e[3J\e[H\e[2J" if STDOUT.tty?
	:clear
end

# Erase erases the screen. It doesn't reset the cursor position!
def erase(*arg)
	print "\e[2J" if STDOUT.tty?
	:erase
end

# Get the histories. hist!(n) where the n implies the number of line.
def hist!(n = 1, return_value = false, *arg)
	begin
		data = File.readlines(@__histfile__)[n.to_i - 1]
		return_value ? (return data) : decorate(data)

	rescue Errno::ENOENT
		puts "#{@__histfile__} doesn't exist".colourize

	rescue Errno::EACCES
		puts "Permission Denied while tried to open #{@__histfile__}".colourize

	rescue Exception => e
		return e, e.backtrace
	end
	nil
end

def eval_hist!(n = 1, *arg)
	line = hist!(n, true).to_s.strip
	decorate line

	if !(line.empty? || line.start_with?('eval_hist'))
		Readline::HISTORY << line
		Kernel.binding.eval(line)
	elsif line.start_with?('eval_hist')
		puts 'Uh oh! Calling method eval_history! recursively is not allowed.'.colourize
	end
end

def history(n=0, return_val=false, *arg)
	begin
		histories = File.readlines(@__histfile__)[0..n.to_i - 1]
		return histories if return_val

	rescue Errno::EACCES
		puts 'Permission Denied'.colourize

	rescue Errno::ENOENT
		puts "#{@__histfile__} doesn't exist.".colourize

	rescue Exception => e
		return e, e.backtrace

	else
		unless block_given?
			puts histories.map.with_index {  |history, i| "#{i + 1}    #{history.strip}".colourize(false) }
		else
			histories.each { |c| yield c }
		end
	end
	nil
end

def eval_all!
	h, i = history(0, true), 0

	decorate "Warning! This will iterate over all the histories and evaluate each one."
	while i < h.size
		begin
			exec = h[i].to_s.strip

			if exec == 'eval_all!'
				i += 1
				next
			end

			puts "\n" * 2
			print "#{sprintf("\e[1;34mevaluator(main):%03d", i + 1)}> "
			print "\e[1m"
			print "#{exec}".colourize
			print "\e[3m"
			decorate "[Press Any key to Continue, Space to skip, ^C / ^D to exit]"
			print "\e[0m"

			i += 1

			case STDIN.getch
			when ' '
				print "Skipping...".colourize
				next
			when "\u0003", "\u0004"
				break
			end

			print (val = eval(exec)) ? "=> #{val}".colourize : "=> nil".colourize

		rescue Interrupt
			exit! 0

		rescue Exception => e
			puts "\e[1;31m#{e}\e[0m"
			i += 1
			retry
		end
	end
end

define_method(:get_history_size) { decorate "#{File.size(@__histfile__).to_s.reverse.gsub(/\d{1,3}/).to_a.join(',').reverse} bytes" if File.readable?(@__histfile__) }
define_method(:get_history_lines) { decorate File.readlines(@__histfile__).count.to_s.reverse.gsub(/\d{1,3}/).to_a.join(',').reverse if File.readable?(@__histfile__) }

def delete_history(*arg)
		if File.writable?(@__histfile__)
			decorate 'Remove history? (N/y)'
			if STDIN.gets.downcase.strip == 'y'
				File.delete(@__histfile__)
				decorate "File #{@__histfile__} deleted"
			else
				decorate "Not Deleted"
			end
		else
			puts "#{@__histfile__} doesn't exist. Nothing to do.".colourize
		end
	nil
end

def write_history(*arg)
	begin
		histories = Readline::HISTORY.to_a[@history_size..-1].map(&:strip)
		histories.delete('write_history')
		histories.delete('save_history')

		File.open(@__histfile__, 'a') { |file| file.puts(histories) }
		puts "#{histories.size} #{histories.size == 1 ? 'line has been' : 'lines have been'} written to #{@__histfile__}".colourize

	rescue Errno::EACESS
		puts "#{@__histfile__} is not writable. Permission denied.".colourize
	end
	nil
end

define_method(:printenv) { |*arg| puts ENV.map { |temp| "#{temp[0]} => #{temp[1]}".colourize(false) } }
define_method(:config) { |*arg| puts RbConfig::CONFIG.to_a.map { |c| "#{c[0]} => #{c[1]}".colourize(false) } }

# Aliases
alias clear! clear
alias erase! erase
alias history! history
alias hist hist!
alias eval_hist eval_hist!
alias write_history! write_history

# Check if ARGV[0] is a file or not. If that's a file, run it just like irb, or load ruby gems!
if File.readable?(ARGV[0].to_s)
	IRB.start(ARGV[0])
	exit! 0
else
	# require gems from arguments!
	ARGV.each_with_index { |gem, temp|
		text = "require '#{gem}'"
		print((sprintf("gem(main):%03d:0> ", temp + 1) + text).colourize(false))
		print ' ' * ((Terminal_Width / 3 - text.length).abs + 1)

		print(
			begin
	 			"# => #{require(gem)}".colourize
			rescue LoadError => e
				"! #{e}".colourize(true, true)
			end
		)
	}
	puts
end unless ARGV.empty?

ARGV.clear

# TODO: Uncomment to Enable TracePoint before starting IRB
# TracePoint.new(:call) { |tp| p [tp.lineno, tp.defined_class, tp.method_id] }.enable

IRB.start(__FILE__)

# use exit! to avoid writing histories
at_exit do
	unless nohistory
		etime = (Time.now - __t__).to_i
		hours, minutes, seconds = etime / 3600, etime % 3600 / 60, etime % 60
		decorate "Exiting after #{hours} #{hours == 1 ? 'hour' : 'hours'} #{minutes} #{minutes == 1 ? 'minute' : 'minutes' } #{seconds} #{seconds == 1 ? 'second' : 'seconds' }." if etime > 0
		write_history
	end
end
